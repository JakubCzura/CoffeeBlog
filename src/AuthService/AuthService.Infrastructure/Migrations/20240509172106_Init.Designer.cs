// <auto-generated />
using System;
using AuthService.Infrastructure.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthService.Infrastructure.Migrations;

[DbContext(typeof(AuthServiceDbContext))]
[Migration("20240509172106_Init")]
partial class Init
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "8.0.4")
            .HasAnnotation("Relational:MaxIdentifierLength", 128);

        SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

        modelBuilder.Entity("AuthService.Domain.Entities.Account", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime?>("BanEndsAt")
                    .HasColumnType("datetime2");

                b.Property<string>("BanNote")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("BanReason")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime?>("BannedAt")
                    .HasColumnType("datetime2");

                b.Property<bool>("IsBanned")
                    .HasColumnType("bit");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UserId")
                    .IsUnique();

                b.ToTable("Account", (string)null);
            });

        modelBuilder.Entity("AuthService.Domain.Entities.ApiError", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Exception")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Message")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("ThrownAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("GETUTCDATE()");

                b.HasKey("Id");

                b.ToTable("ApiError", (string)null);
            });

        modelBuilder.Entity("AuthService.Domain.Entities.RequestDetail", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("ControllerName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("HttpMethod")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Path")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RequestBody")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RequestContentType")
                    .HasColumnType("nvarchar(max)");

                b.Property<long>("RequestTimeInMiliseconds")
                    .HasColumnType("bigint");

                b.Property<string>("ResponseBody")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ResponseContentType")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("SentAt")
                    .HasColumnType("datetime2");

                b.Property<int>("StatusCode")
                    .HasColumnType("int");

                b.Property<int?>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("RequestDetails");
            });

        modelBuilder.Entity("AuthService.Domain.Entities.Role", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("GETUTCDATE()");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnType("nvarchar(200)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.ToTable("Role", (string)null);
            });

        modelBuilder.Entity("AuthService.Domain.Entities.User", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("GETUTCDATE()");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(320)
                    .HasColumnType("nvarchar(320)");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.HasIndex("Username", "Email")
                    .IsUnique();

                b.ToTable("User", (string)null);
            });

        modelBuilder.Entity("AuthService.Domain.Entities.UserDetail", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime?>("LastEmailChange")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("LastFailedSignIn")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("LastPasswordChange")
                    .HasColumnType("datetime2");

                b.Property<DateTime>("LastSuccessfullSignIn")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime2")
                    .HasDefaultValueSql("GETUTCDATE()");

                b.Property<DateTime?>("LastUsernameChange")
                    .HasColumnType("datetime2");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UserId")
                    .IsUnique();

                b.ToTable("UserDetail", (string)null);
            });

        modelBuilder.Entity("AuthService.Domain.Entities.UserLastPassword", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime2");

                b.Property<string>("LastPassword")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("UserLastPasswords");
            });

        modelBuilder.Entity("AuthService.Domain.Entities.UserToRole", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("RoleId")
                    .HasColumnType("int");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.HasIndex("UserId");

                b.ToTable("UserToRole", (string)null);
            });

        modelBuilder.Entity("AuthService.Domain.Entities.Account", b =>
            {
                b.HasOne("AuthService.Domain.Entities.User", null)
                    .WithOne()
                    .HasForeignKey("AuthService.Domain.Entities.Account", "UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("AuthService.Domain.Entities.RequestDetail", b =>
            {
                b.HasOne("AuthService.Domain.Entities.User", null)
                    .WithMany("RequestDetails")
                    .HasForeignKey("UserId");
            });

        modelBuilder.Entity("AuthService.Domain.Entities.UserDetail", b =>
            {
                b.HasOne("AuthService.Domain.Entities.User", null)
                    .WithOne()
                    .HasForeignKey("AuthService.Domain.Entities.UserDetail", "UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("AuthService.Domain.Entities.UserLastPassword", b =>
            {
                b.HasOne("AuthService.Domain.Entities.User", null)
                    .WithMany("LastPasswords")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("AuthService.Domain.Entities.UserToRole", b =>
            {
                b.HasOne("AuthService.Domain.Entities.Role", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("AuthService.Domain.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("AuthService.Domain.Entities.User", b =>
            {
                b.Navigation("LastPasswords");

                b.Navigation("RequestDetails");
            });
#pragma warning restore 612, 618
    }
}
